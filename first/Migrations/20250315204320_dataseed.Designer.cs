// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using first.models;

#nullable disable

namespace first.Migrations
{
    [DbContext(typeof(HOSPITALDbContext))]
    [Migration("20250315204320_dataseed")]
    partial class dataseed
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("first.models.Appointment", b =>
                {
                    b.Property<int>("AppointmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppointmentId"));

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("AppointmentId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointments");

                    b.HasData(
                        new
                        {
                            AppointmentId = 1,
                            AppointmentDate = new DateTime(2025, 3, 16, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 1,
                            PatientId = 1,
                            Status = 0
                        },
                        new
                        {
                            AppointmentId = 2,
                            AppointmentDate = new DateTime(2025, 3, 18, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 2,
                            PatientId = 2,
                            Status = 0
                        });
                });

            modelBuilder.Entity("first.models.Billing", b =>
                {
                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<decimal>("PaidAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("AppointmentId");

                    b.HasIndex("PatientId");

                    b.ToTable("Billings");

                    b.HasData(
                        new
                        {
                            AppointmentId = 1,
                            PaidAmount = 50.00m,
                            PatientId = 1,
                            PaymentStatus = 0,
                            TotalAmount = 200.00m
                        },
                        new
                        {
                            AppointmentId = 2,
                            PaidAmount = 300.00m,
                            PatientId = 2,
                            PaymentDate = new DateTime(2025, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentStatus = 1,
                            TotalAmount = 300.00m
                        });
                });

            modelBuilder.Entity("first.models.Doctor", b =>
                {
                    b.Property<int>("DoctorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DoctorId"));

                    b.Property<string>("ContactInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Schedule")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UsersmemberId")
                        .HasColumnType("int");

                    b.HasKey("DoctorId");

                    b.HasIndex("UsersmemberId")
                        .IsUnique();

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            DoctorId = 1,
                            ContactInfo = "123-456-7890",
                            Name = "Dr. Ahmed",
                            Schedule = "Mon-Fri, 9 AM - 5 PM",
                            Specialization = "Cardiology",
                            UsersmemberId = 2
                        },
                        new
                        {
                            DoctorId = 2,
                            ContactInfo = "987-654-3210",
                            Name = "Dr. Sara",
                            Schedule = "Tue-Sat, 10 AM - 6 PM",
                            Specialization = "Dermatology",
                            UsersmemberId = 4
                        },
                        new
                        {
                            DoctorId = 3,
                            ContactInfo = "555-123-7890",
                            Name = "Dr. James",
                            Schedule = "Mon-Sat, 8 AM - 4 PM",
                            Specialization = "Orthopedics",
                            UsersmemberId = 5
                        });
                });

            modelBuilder.Entity("first.models.DoctorPatient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("DoctorPatients");
                });

            modelBuilder.Entity("first.models.MedicalRecord", b =>
                {
                    b.Property<int>("RecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RecordId"));

                    b.Property<string>("Diagnosis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<string>("LabResults")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("Prescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RecordDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Report")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TreatmentPlan")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RecordId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("MedicalRecords");

                    b.HasData(
                        new
                        {
                            RecordId = 1,
                            Diagnosis = "Hypertension",
                            DoctorId = 1,
                            LabResults = "BP: 140/90",
                            PatientId = 1,
                            Prescription = "Lisinopril 10mg",
                            RecordDate = new DateTime(2025, 3, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Report = "Follow up in 2 weeks",
                            TreatmentPlan = "Monitor BP"
                        },
                        new
                        {
                            RecordId = 2,
                            Diagnosis = "Skin Allergy",
                            DoctorId = 2,
                            LabResults = "Patch test positive",
                            PatientId = 2,
                            Prescription = "Antihistamines",
                            RecordDate = new DateTime(2025, 3, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Report = "Recheck in 1 month",
                            TreatmentPlan = "Avoid allergens"
                        });
                });

            modelBuilder.Entity("first.models.Patient", b =>
                {
                    b.Property<int>("PatientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientId"));

                    b.Property<string>("ContactInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("MedicalHistory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PatientId");

                    b.ToTable("Patients");

                    b.HasData(
                        new
                        {
                            PatientId = 1,
                            ContactInfo = "john.doe@example.com",
                            DateOfBirth = new DateTime(1990, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = 0,
                            MedicalHistory = "No known allergies. Previous surgery in 2015.",
                            Name = "John Doe"
                        },
                        new
                        {
                            PatientId = 2,
                            ContactInfo = "jane.smith@example.com",
                            DateOfBirth = new DateTime(1985, 7, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = 1,
                            MedicalHistory = "Diabetic. Takes insulin daily.",
                            Name = "Jane Smith"
                        });
                });

            modelBuilder.Entity("first.models.Usersmember", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            PasswordHash = "123",
                            Role = 0,
                            Username = "admin"
                        },
                        new
                        {
                            UserId = 2,
                            PasswordHash = "123",
                            Role = 1,
                            Username = "dr.ahmed"
                        },
                        new
                        {
                            UserId = 3,
                            PasswordHash = "123",
                            Role = 2,
                            Username = "reception1"
                        },
                        new
                        {
                            UserId = 4,
                            PasswordHash = "123",
                            Role = 1,
                            Username = "dr.sara"
                        },
                        new
                        {
                            UserId = 5,
                            PasswordHash = "123",
                            Role = 1,
                            Username = "dr.james"
                        });
                });

            modelBuilder.Entity("first.models.Appointment", b =>
                {
                    b.HasOne("first.models.Doctor", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("first.models.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("first.models.Billing", b =>
                {
                    b.HasOne("first.models.Appointment", "Appointment")
                        .WithOne("Billing")
                        .HasForeignKey("first.models.Billing", "AppointmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("first.models.Patient", "Patient")
                        .WithMany("Billings")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("first.models.Doctor", b =>
                {
                    b.HasOne("first.models.Usersmember", "Usersmember")
                        .WithOne("Doctor")
                        .HasForeignKey("first.models.Doctor", "UsersmemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usersmember");
                });

            modelBuilder.Entity("first.models.DoctorPatient", b =>
                {
                    b.HasOne("first.models.Doctor", "Doctor")
                        .WithMany("DoctorPatients")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("first.models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("first.models.MedicalRecord", b =>
                {
                    b.HasOne("first.models.Doctor", "Doctor")
                        .WithMany("MedicalRecords")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("first.models.Patient", "Patient")
                        .WithMany("MedicalRecords")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("first.models.Appointment", b =>
                {
                    b.Navigation("Billing");
                });

            modelBuilder.Entity("first.models.Doctor", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("DoctorPatients");

                    b.Navigation("MedicalRecords");
                });

            modelBuilder.Entity("first.models.Patient", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Billings");

                    b.Navigation("MedicalRecords");
                });

            modelBuilder.Entity("first.models.Usersmember", b =>
                {
                    b.Navigation("Doctor");
                });
#pragma warning restore 612, 618
        }
    }
}
